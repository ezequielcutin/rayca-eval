{
    "openapi": "3.0.0",
    "info": {
      "title": "Customer Support Ticket API",
      "version": "1.0.0",
      "description": "API documentation for the Customer Support Ticket microservice"
    },
    "servers": [
      {
        "url": "http://localhost:5001",
        "description": "Local server"
      }
    ],
    "components": {
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "paths": {
      "/api/auth/register": {
        "post": {
          "tags": [
            "User Functions"
          ],
          "summary": "Register a new user",
          "description": "You can either run these curl commands or attempt to do the \"Try it out\" function below.. Please note that the \"Try it out\" only works for those functions where you don't need a token.\n\nTo register a user via the terminal using `curl`, follow these steps:\n\n```sh\ncurl -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\", \"email\": \"johndoe@example.com\", \"password\": \"password123\"}'\n```",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "password123"
                    }
                  },
                  "required": [
                    "name",
                    "email",
                    "password"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User registered successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          }
        }
      },
      "/api/auth/login": {
        "post": {
          "tags": [
            "User Functions"
          ],
          "summary": "Log in a user",
          "description": "You can either run these curl commands or attempt to do the \"Try it out\" function. Please note that the \"Try it out\" only works for those functions where you don't need a token.\n\nTo log in a user via the terminal using `curl`, follow these steps:\n\n```sh\ncurl -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"johndoe@example.com\", \"password\": \"password123\"}'\n```",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "johndoe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "password123"
                    }
                  },
                  "required": [
                    "email",
                    "password"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User logged in successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            }
          }
        }
      },
      "/api/auth/user": {
        "get": {
          "tags": [
            "User Functions"
          ],
          "summary": "Get user data",
          "description": "To get user data via the terminal using `curl`, follow these steps:\n\n1. **Register a User and get the token** (if you don't have an account already):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"ExampleName\", \"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n2. **Or Login to get the token** (if you already have an account):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n3. **Use the token to get user data**:\n```sh\ncurl -X GET http://localhost:5001/api/auth/user \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: $TOKEN\"\n```",
          "security": [
            {
              "BearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User data retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
        "/api/tickets": {
            "post": {
              "tags": [
                "Ticket Functions"
              ],
              "summary": "Create a new ticket",
              "description": "To create a ticket via the terminal using `curl`, follow these steps:\n\n1. **Register a User and get the token** (if you don't have an account already):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"ExampleName\", \"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n2.  **Or Login to get the token** (if you already have an account):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n3. **Use the token to create a ticket**:\n```sh\ncurl -X POST http://localhost:5001/api/tickets \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: $TOKEN\" \\\n  -d '{\n    \"title\": \"Ticket Subject\",\n    \"description\": \"Ticket Description.\",\n    \"status\": \"open\",\n    \"assignedToEmail\": \"UserTicketAssigned@example.com\"\n}'\n```\n\nThis will create a ticket, posted on MongoDB, as well as send out an email from the User that created the ticket to the ticket recipient. \n\n**Note:** The \"Try it out\" button won't work for this endpoint as it needs your login token, and there's no way to code that in Swagger.",
              "security": [
                {
                  "BearerAuth": []
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "example": "Issue with login"
                        },
                        "description": {
                          "type": "string",
                          "example": "Unable to login with my credentials"
                        },
                        "status": {
                          "type": "string",
                          "example": "open"
                        },
                        "assignedToEmail": {
                          "type": "string",
                          "example": "johndoe@example.com"
                        }
                      },
                      "required": [
                        "title",
                        "description",
                        "status",
                        "assignedToEmail"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Ticket created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "assignedTo": {
                            "type": "string"
                          },
                          "user": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                }
              }
            },
            "get": {
                "tags": [
                    "Ticket Functions"
                ],
                "summary": "Get all tickets",
                "description": "To get all tickets via the terminal using `curl`, follow these steps:\n\n1. **Register a User and get the token** (if you don't have an account already):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"ExampleName\", \"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n2.  **Or Login to get the token** (if you already have an account):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n3. **Use the token to get all tickets**:\n```sh\ncurl -X GET http://localhost:5001/api/tickets \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: $TOKEN\"\n ```\n\nThis will output all tockens into your terminal in .JSON format. Ideally used for admin purposes. \n\n**Note:** The \"Try it out\" button won't work for this endpoint as it needs your login token, and there's no way to code that in Swagger.",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tickets retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "title": {
                                                "type": "string"
                                            },
                                            "description": {
                                                "type": "string"
                                            },
                                            "status": {
                                                "type": "string"
                                            },
                                            "assignedTo": {
                                                "type": "string"
                                            },
                                            "user": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/tickets/{id}": {
            "put": {
                "tags": [
                    "Ticket Functions"
                ],
                "summary": "Update a ticket",
                "description": "To update a ticket via the terminal using `curl`, follow these steps:\n\n1. **Register a User and get the token** (if you don't have an account already):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"ExampleName\", \"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n2.  **Or Login to get the token** (if you already have an account):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n3. **Use the token to update a ticket**:\n```sh\ncurl -X PUT http://localhost:5001/api/tickets/<TICKET_ID> \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: $TOKEN\" \\\n  -d '{\n    \"title\": \"Updated title\",\n    \"description\": \"Updated description.\",\n    \"status\": \"open\",\n    \"assignedToEmail\": \"test@example.com\"\n}'\n```\n\nReplace `<TICKET_ID>` at the top of the `curl` command with the ID of the ticket you want to update. \n\n**Note:** The \"Try it out\" button won't work for this endpoint as it needs your login token, and there's no way to code that in Swagger.",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Updated issue with login"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Still unable to login"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "open"
                                    },
                                    "assignedTo": {
                                        "type": "string",
                                        "example": "60d0fe4f5311236168a109ca"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ticket updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string"
                                        },
                                        "description": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string"
                                        },
                                        "assignedTo": {
                                            "type": "string"
                                        },
                                        "user": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Ticket Functions"
                ],
                "summary": "Delete a ticket",
                "description": "To delete a ticket via the terminal using `curl`, follow these steps:\n\n1. **Register a User and get the token** (if you don't have an account already):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"ExampleName\", \"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n2.  **Or Login to get the token** (if you already have an account):\n```sh\nTOKEN=$(curl -s -X POST http://localhost:5001/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"email\": \"ExampleEmail@example.com\", \"password\": \"password123\"}' | jq -r '.token')\n```\n\n3. **Use the token to delete a ticket**:\n```sh\ncurl -X DELETE http://localhost:5001/api/tickets/<TICKET_ID> \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-auth-token: <YOUR_JWT_TOKEN>\"\n```\n\nReplace `<TICKET_ID>` at the top of the `curl` command with the ID of the ticket you want to delete.\n\n**Note:** The \"Try it out\" button won't work for this endpoint as it needs your login token, and there's no way to code that in Swagger.",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Ticket removed"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                }
            }
        }
    }
}